class A
functions
	public curry: nat * nat -> nat -> nat
	curry(a1, a2)(b) ==
		if b = 0
		then a1 * a2
		else curry(a1, a2)(b-1)
	measure mc;
	
	mc: nat * nat -> nat -> nat
	mc(-, -)(c) == c;
	
	public fact(a: nat) r:nat ==
		if a = 1 then 1 else a * fact(a-1)
	measure mf;
	
	mf: nat -> nat
	mf(a) == a;
	
	public static add1: nat -> nat
	add1(n) == n + 1;

	public fmap[@elem]: (@elem -> @elem) -> seq of @elem -> seq of @elem
	fmap(f)(l) ==
		if l = []
		then []
		else [f(hd l)]^(fmap[@elem](f)(tl l))
	measure mfmap;
	
	mfmap[@elem]: (@elem -> @elem) -> seq of @elem -> nat
	mfmap(-)(s) == len s;
	
	public poly[@T]: seq of @T -> nat
	poly(a) ==
		if a = []
		then 0
		else 1 + poly[@T](tl a)
	measure mp;
	
	mp[@T]: seq of @T -> nat
	mp(n) == len n;
	
end A
